import json
import os
import random
import sqlite3
import re
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å BOT_TOKEN=...)
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

print(">>> –Ø –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π bot.py")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ tasks.json
with open('tasks.json', 'r', encoding='utf-8') as f:
    TASKS = json.load(f)

# =================== –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π ===================

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('db.sqlite')
        c = conn.cursor()
        c.execute('DROP TABLE IF EXISTS users')
        c.execute('''CREATE TABLE users (
            user_id INTEGER PRIMARY KEY,
            reminder_time TEXT
        )''')
        conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")
    finally:
        conn.close()

def save_user_time(user_id, time):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect('db.sqlite')
        c = conn.cursor()
        c.execute('INSERT OR REPLACE INTO users (user_id, reminder_time) VALUES (?, ?)', (user_id, time))
        conn.commit()
        print(f"‚è∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è {time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {user_id}: {e}")
    finally:
        conn.close()

def get_users():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –≤—Ä–µ–º–µ–Ω–µ–º"""
    try:
        conn = sqlite3.connect('db.sqlite')
        c = conn.cursor()
        c.execute('SELECT user_id, reminder_time FROM users')
        users = c.fetchall()
        conn.close()
        return {user_id: {'time': time} for user_id, time in users}
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}

def remove_user(user_id):
    """–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã"""
    try:
        conn = sqlite3.connect('db.sqlite')
        c = conn.cursor()
        c.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
        conn.commit()
        print(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω")
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        conn.close()

# =================== –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===================

def is_valid_time(time_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)"""
    return bool(re.match(r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$', time_str))

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø "Little step to happiness". üå∏\n'
        '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n'
        '–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n'
        '/settime 10:00'
    )

async def set_time(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text('–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: /settime 10:00')
        return
    time = context.args[0]
    if not is_valid_time(time):
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: /settime 10:00')
        return
    user_id = update.message.from_user.id
    save_user_time(user_id, time)
    await update.message.reply_text(f'‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {time}! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏–µ üåø')

async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        '–Ø "Little step to happiness"! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n'
        '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
        '/settime HH:MM - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
        '/stop - –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
    )

async def stop(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    remove_user(user_id)
    await update.message.reply_text('‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /settime HH:MM')

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
async def send_daily_task(app: Application):
    users = get_users()
    current_time = datetime.now().strftime('%H:%M')
    for user_id, data in users.items():
        if data['time'] == current_time:
            task = random.choice(TASKS)
            try:
                await app.bot.send_message(chat_id=user_id, text=f'‚ú® –¢–≤–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Å—á–∞—Å—Ç—å—é —Å–µ–≥–æ–¥–Ω—è:\n\n{task}')
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {task}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

# =================== –ó–∞–ø—É—Å–∫ ===================

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('settime', set_time))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('stop', stop))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_daily_task, 'interval', minutes=1, args=[app])
    scheduler.start()

    app.run_polling()

if __name__ == '__main__':
    main()